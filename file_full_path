import os
import pdfplumber
import pandas as pd  # 导入Pandas库
import numpy as np  # 添加numpy库用于计算Z-score
from config.GlobalConfig import ConfigSingleton # 导入mysqlUtil模块
from utils.MysqlUtil import MySQLUtil
from utils.AIUtils import model_chat, model_generate
import math
import traceback
import tkinter as tk
from tkinter import filedialog, messagebox

g_root_path = "D:\hr\AI\公共资源\项目汇总(2)\项目汇总"

current_project_name = ""
sys_message="""
    ## 角色：
    你是一个数据分析专家和统计学顾问
    ## 背景：
    用户需要对投标打分表进行深度分析，目的是检验专家打分是否存在异常现象，如故意抬高或压低排名，以及是否存在对某投标人的偏向。这通常是为了确保招标过程的公正性和透明度，防止不正当竞争行为。
    ## 技能：
    你精通统计分析、数据挖掘、异常检测等技术，能够运用专业的统计软件和工具对数据进行深度分析，并通过逻辑推理和数据验证来得出准确的结论。
    ## 目标
      1. 对投标打分表进行初步的数据清洗和整理，确保数据的准确性和完整性。
      2. 运用统计方法（如均值、标准差、方差分析、相关性分析等）分析专家打分的分布情况，识别是否存在异常打分。
      3. 通过聚类分析、回归分析等方法，找出专家对某投标人的偏向性，判断是否存在故意抬高或压低排名的现象。
      4. 提供详细的分析报告，包括数据可视化图表和结论，为用户决策提供依据。
    ## 流程
        1. 数据预处理：附件表格为专家打分表，其中一行是一个投标人，一列为一个专家。此外还有投标人列，编号列，均分列，总分列，。
        2. 描述性统计分析：得到每个投标人的得分均值、标准差、方差等统计指标，分析专家打分的集中趋势和离散程度。
        3. 异常检测与偏向性分析：运用聚类分析、回归分析等方法，识别专家打分中的异常模式和对某投标人的偏向性。
        4. 结果呈现与报告撰写：撰写详细的分析报告，为用户提供决策支持。最后一句话总结
    ## 要求
    返回汇总记录，并对异常打分项进行分析，并给出原因。
    ## 输出
    分析报告应包括数据清洗过程、统计分析方法、异常检测结果、偏向性分析结论
    """
# 预设的提示模板
PROMPT_TEMPLATE = """
以下是一些数据：
{data}
请对这些数据进行分析，并给出结论。
"""


def main(mysqlUtil, g_root_path):
    print("main")
    global g_root_path
    root_folder = g_root_path  # 替换为实际的项目文件夹路径
    review_summaries = find_review_summary_pdfs(root_folder)
    print(review_summaries)
    
    # 连接到MySQL数据库
    
    for pdf_path in review_summaries:
        print(f"Processing PDF: {pdf_path}")
        # 传递项目名称给extract_tables_from_pdf函数
        dataframes = extract_tables_from_pdf(pdf_path)
        for i, df in enumerate(dataframes):
            print(f"Table {i+1}:")
            print(df)
            print("\n" + "-"*50 + "\n")
            # 将DataFrame写入MySQL数据库
            #table_name = f"table_score_info"  # 假设表名为table_1, table_2, ...
            #mysqlUtil.write_dataframe_to_mysql(df, table_name)

# 新增: 创建GUI界面
def create_gui():
    def upload_file():
        file_path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
        if file_path:
            try:
                dataframes = extract_tables_from_pdf(file_path)
                for df in dataframes:
                    result = findout_except_expert_by_ai(df.to_json(orient='records', force_ascii=False))
                    result_text.insert(tk.END, result + "\n")
            except Exception as e:
                messagebox.showerror("Error", f"An error occurred: {e}")

    # 创建主窗口
    root = tk.Tk()
    root.title("PDF Analyzer")

    # 创建文件上传按钮
    upload_button = tk.Button(root, text="Upload PDF", command=upload_file)
    upload_button.pack(pady=20)

    # 创建结果显示文本框
    result_text = tk.Text(root, height=20, width=80)
    result_text.pack(pady=20)

    # 运行主循环
    root.mainloop()

if __name__ == "__main__":
    mysqlUtil = MySQLUtil()
    create_gui()
